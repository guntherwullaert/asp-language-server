use dashmap::DashMap;
use tower_lsp::{
    lsp_types::{DiagnosticSeverity, MessageType},
    Client,
};

use crate::{
    document::DocumentData,
    treeutils::{do_simple_query, retrace}, test_utils::create_test_document,
};

use super::{diagnostic_run_data::DiagnosticsRunData, error_codes::*};

/**
 * Walk through the parse tree and analyze the statements
 */
pub fn statement_analysis(diagnostic_data: &mut DiagnosticsRunData, document: &DocumentData) {
    let mut cursor = document.tree.walk();

    let mut reached_root = false;
    while !reached_root {
        let node = cursor.node();

        if diagnostic_data.current_number_of_problems >= diagnostic_data.maximum_number_of_problems
        {
            return;
        };

        if node.kind() == "statement" || node.kind() == "bodyaggrelemvec" {
            //Check if a variable is unsafe
            let all_variables = DashMap::new();
            let mut safe_variables: Vec<&str> = Vec::new();
            let root = node.kind();

            //Create a query to search for the variables in the statement
            let all_captures = do_simple_query(
                r#"
                ((VARIABLE) @variable)
                "#,
                node,
                document.source.as_bytes(),
            );

            //For each occurence check if the variable is safe
            for capture in all_captures {
                let (range, name, capture_node) = capture;

                //traverse up the tree and see if this variable is contained by something that is safe
                let mut reached = false;
                let mut inspected_node = capture_node;
                let mut out_of_scope = false;
                while !reached {
                    match inspected_node.parent() {
                        Some(parent) => inspected_node = parent,
                        None => {
                            diagnostic_data.create_linter_diagnostic(
                                range,
                                DiagnosticSeverity::ERROR,
                                0,
                                "(statement analysis) reached root without, reaching a known node!"
                                    .to_string(),
                            );
                            break;
                        }
                    }

                    if inspected_node.kind() == root {
                        reached = true;
                    }
                    else if inspected_node.kind() == "bodydot" || inspected_node.kind() == "optcondition" {
                        safe_variables.push(name);
                        reached = true;
                    }
                    else if inspected_node.kind() == "conjunction" || inspected_node.kind() == "bodyaggregate" {
                        reached = true;
                        out_of_scope = true;
                    }
                    else if inspected_node.kind() == "atom" {
                        match inspected_node.prev_sibling() {
                            Some(prev) => {
                                if prev.kind() == "NOT" {
                                    reached = true;
                                }
                            }
                            None => continue,
                        }
                    } else if inspected_node.kind() == "disjunction" {
                        //for child in inspected_node
                    }
                }

                if out_of_scope {
                    break;
                }

                if !all_variables.contains_key(name) {
                    let ranges = vec![range];
                    all_variables.insert(name, ranges);
                } else {
                    all_variables.get_mut(name).unwrap().push(range)
                }
            }

            //Remove every entry in all_variables that is in the safe variable list
            for safe in safe_variables {
                all_variables.remove(safe);
            }

            //Send an error to the client for each variable that is unsafe
            for var in all_variables {
                for range in var.1 {
                    diagnostic_data.create_linter_diagnostic(
                        range,
                        DiagnosticSeverity::ERROR,
                        UNSAFE_VARIABLE,
                        format!("'{}' is unsafe", var.0),
                    );
                }
            }
        }

        if cursor.goto_first_child() {
            continue;
        }

        if cursor.goto_next_sibling() {
            continue;
        }

        (cursor, reached_root) = retrace(cursor);
    }
}

#[test]
fn unsafe_variables_should_be_detected_no_body() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("a(X).".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 1);

    assert_eq!(
        format!(
            "{:?}",
            diags
                .total_diagnostics
                .get(0)
                .unwrap()
                .code
                .clone()
                .unwrap()
        ),
        format!("Number({})", UNSAFE_VARIABLE)
    );
}

#[test]
fn unsafe_variables_should_be_detected_no_variables_in_body() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("a(X) :- b.".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 1);

    assert_eq!(
        format!(
            "{:?}",
            diags
                .total_diagnostics
                .get(0)
                .unwrap()
                .code
                .clone()
                .unwrap()
        ),
        format!("Number({})", UNSAFE_VARIABLE)
    );
}

#[test]
fn unsafe_variables_should_not_be_detected_if_variable_in_body() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("a(X) :- b(X).".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 0);
}

#[test]
fn safeness_should_be_blocked_by_not() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("a(X) :- not b(X).".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 1);

    assert_eq!(
        format!(
            "{:?}",
            diags
                .total_diagnostics
                .get(0)
                .unwrap()
                .code
                .clone()
                .unwrap()
        ),
        format!("Number({})", UNSAFE_VARIABLE)
    );
}

#[test]
fn safeness_should_be_blocked_by_multiple_nots() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("a(X) :- not not b(X).".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 1);

    assert_eq!(
        format!(
            "{:?}",
            diags
                .total_diagnostics
                .get(0)
                .unwrap()
                .code
                .clone()
                .unwrap()
        ),
        format!("Number({})", UNSAFE_VARIABLE)
    );
}

#[test]
fn safeness_should_be_working_if_one_of_the_body_atoms_provides_it() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("a(X) :- not b(X), b(X).".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 0);
}

#[test]
fn safeness_should_not_be_blocked_by_not_in_head() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("not a(X) :- b(X).".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 0);
}

#[test]
fn unsafe_variables_should_be_detected_in_choice_rule_with_no_body() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("{a(X)}.".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 1);

    assert_eq!(
        format!(
            "{:?}",
            diags
                .total_diagnostics
                .get(0)
                .unwrap()
                .code
                .clone()
                .unwrap()
        ),
        format!("Number({})", UNSAFE_VARIABLE)
    );
}

#[test]
fn safeness_correctly_detected_in_choice_rule() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("{a(X) : b(X)}.".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 0);
}

#[test]
fn unsafe_variables_should_be_detected_in_choice_rule() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("{a(Y) : b(X)}.".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 1);

    assert_eq!(
        format!(
            "{:?}",
            diags
                .total_diagnostics
                .get(0)
                .unwrap()
                .code
                .clone()
                .unwrap()
        ),
        format!("Number({})", UNSAFE_VARIABLE)
    );
}

#[test]
fn body_can_safe_variables_in_choice_rule() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("{a(X)} :- b(X).".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 0);
}

#[test]
fn unsafe_variables_should_be_detected_in_conjunctions() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("{a(X)} :- a : b(X).".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 1);

    assert_eq!(
        format!(
            "{:?}",
            diags
                .total_diagnostics
                .get(0)
                .unwrap()
                .code
                .clone()
                .unwrap()
        ),
        format!("Number({})", UNSAFE_VARIABLE)
    );
}

#[test]
fn safeness_should_be_detected_in_conjunctions() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("a :- a(Y) : b(X).".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 0);
}

#[test]
fn unsafe_variables_should_be_detected_in_show() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("#show X : a.".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 1);

    assert_eq!(
        format!(
            "{:?}",
            diags
                .total_diagnostics
                .get(0)
                .unwrap()
                .code
                .clone()
                .unwrap()
        ),
        format!("Number({})", UNSAFE_VARIABLE)
    );
}

#[test]
fn safeness_should_be_detected_in_show() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("#show X : a(X).".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 0);
}

#[test]
fn unsafe_variables_should_be_detected_with_aggregates() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("a(X) :- N = #count{X : b(X)}.".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 1);

    assert_eq!(
        format!(
            "{:?}",
            diags
                .total_diagnostics
                .get(0)
                .unwrap()
                .code
                .clone()
                .unwrap()
        ),
        format!("Number({})", UNSAFE_VARIABLE)
    );
}

#[test]
fn unsafe_variables_should_be_detected_with_aggregates_and_disjunction() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("a(N), c(X) :- N = #count{X : b(X)}.".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 1);

    assert_eq!(
        format!(
            "{:?}",
            diags
                .total_diagnostics
                .get(0)
                .unwrap()
                .code
                .clone()
                .unwrap()
        ),
        format!("Number({})", UNSAFE_VARIABLE)
    );
}

#[test]
fn safeness_should_be_detected_with_aggregates() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("a :- N = #count{X : b(X)}.".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 0);
}

#[test]
fn unsafe_variables_should_be_detected_within_aggregates() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("a :- N = #count{X : b}.".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 1);

    assert_eq!(
        format!(
            "{:?}",
            diags
                .total_diagnostics
                .get(0)
                .unwrap()
                .code
                .clone()
                .unwrap()
        ),
        format!("Number({})", UNSAFE_VARIABLE)
    );
}

#[test]
fn unsafe_variables_should_be_detected_with_disjunction() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("a(E) : b(X) :- a.".to_string()));

    assert_eq!(diags.total_diagnostics.len(), 2);

    assert_eq!(
        format!(
            "{:?}",
            diags
                .total_diagnostics
                .get(0)
                .unwrap()
                .code
                .clone()
                .unwrap()
        ),
        format!("Number({})", UNSAFE_VARIABLE)
    );
}

#[test]
fn safeness_should_be_detected_with_disjunction() {
    let mut diags = DiagnosticsRunData::create_test_diagnostics();

    statement_analysis(&mut diags, &create_test_document("a(X) : b(X) :- a.".to_string()));

    //assert_eq!(diags.total_diagnostics.len(), 1);

    for diag in diags.total_diagnostics.iter() {
        println!("{}", diag.message);
    }
}